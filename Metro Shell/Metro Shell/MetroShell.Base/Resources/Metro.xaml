<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:vsm="clr-namespace:System.Windows;assembly=VisualStateManager">

    <FontFamily x:Key="ContentFontFamily">/MetroShell.Base/Fonts/SegoeWP-Light.ttf</FontFamily>

    <sys:Double x:Key="ContentFontSize">16</sys:Double>
    <sys:Double x:Key="ControlStrokeThickness">2</sys:Double>

    <Thickness x:Key="ControlBorderThickness">2</Thickness>

    <Color x:Key="ControlPressedTextColor">#FF212121</Color>
    <Color x:Key="ControlDisabledTextColor">#7C000000</Color>
    <Color x:Key="CheckBoxDisabledGlyphColor">#7C272727</Color>
    <Color x:Key="TextBoxMouseOverFillColor">#DD000000</Color>
    <Color x:Key="TextBoxMouseOverStrokeColor">#70FFFFFF</Color>
    <Color x:Key="TextBoxDisabledColor">#7C000000</Color>
    <Color x:Key="TextBoxDisabledFillColor">Transparent</Color>

    <SolidColorBrush x:Key="ButtonBackgroundBrush" Color="Transparent" />
    <SolidColorBrush x:Key="TextBoxRestFillBrush" Color="#CC000000" />
    <SolidColorBrush x:Key="TextBoxRestBorderBrush" Color="#CC000000" />
    <SolidColorBrush x:Key="TextBoxGlyphBrush" Color="#FFCECECE" />
    <SolidColorBrush x:Key="TextBoxFocusFillBrush" Color="Gray" />
    <SolidColorBrush x:Key="TextBoxGlyphHoverFillBrush" Color="#FF5C5C5C" />
    <SolidColorBrush x:Key="TextBoxGlyphPressedFillBrush" Color="#FFD8D8D8" />
    <SolidColorBrush x:Key="ControlNormalFillBrush" Color="#FFC7C7C7" />
    <SolidColorBrush x:Key="ControlForegroundBrush" Color="#FF212121" />
    <SolidColorBrush x:Key="ControlMouseOverFillBrush" Color="#3D000000" />
    <SolidColorBrush x:Key="ControlNormalStrokeBrush" Color="Gray" />
    <SolidColorBrush x:Key="ControlMouseOverStrokeBrush" Color="Gray" />
    <SolidColorBrush x:Key="ControlPressedStrokeBrush" Color="#FFC7C7C7" />
    <SolidColorBrush x:Key="ControlBorderBrush" Color="Gray" />
    <SolidColorBrush x:Key="ControlDisabledBrush" Color="#7C000000" />
    <SolidColorBrush x:Key="ControlDisabledFillBrush" Color="Transparent" />
    <SolidColorBrush x:Key="ControlTransparentFillBrush" Color="Transparent" />
    <SolidColorBrush x:Key="ControlGlyphBrush" Color="#FF444444" />
    <SolidColorBrush x:Key="InputControlDisabledBrush" Color="#21FFFFFF" />
    <SolidColorBrush x:Key="InputControlDisabledFillBrush" Color="#7C000000" />
    <SolidColorBrush x:Key="ProgressBarFillBrush" Color="#FF369ACA" />
    <SolidColorBrush x:Key="ProgressBarTrackBrush" Color="#61000000" />

    <!-- Default style for Button -->
    <Style TargetType="Button">
        <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrush}" />
        <Setter Property="MinWidth" Value="94" />
        <Setter Property="MinHeight" Value="36" />
        <Setter Property="Foreground" Value="{StaticResource ControlForegroundBrush}" />
        <Setter Property="FontFamily" Value="{StaticResource ContentFontFamily}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="{StaticResource ContentFontSize}" />
        <Setter Property="Padding" Value="12,4,12,5" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="{StaticResource ControlBorderThickness}" />
        <Setter Property="BorderBrush" Value="{StaticResource ControlNormalStrokeBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" Duration="0" To="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" Duration="0" To="0" />
                                        <ColorAnimation Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Color)" Duration="0" To="{StaticResource ControlPressedTextColor}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="DisabledVisualElement" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" Duration="0" To="0" />
                                        <ColorAnimation Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Color)" Duration="0" To="{StaticResource ControlDisabledTextColor}" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="FocusVisualWhite" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                        <DoubleAnimation Storyboard.TargetName="FocusVisualBlack" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                                <VisualState x:Name="PointerFocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid Margin="3">
                            <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                            <Border x:Name="MouseOverBorder" Background="{StaticResource ControlMouseOverFillBrush}" BorderBrush="{StaticResource ControlMouseOverStrokeBrush}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" />
                            <Border x:Name="PressedBorder" Background="{StaticResource ControlForegroundBrush}" BorderBrush="{StaticResource ControlPressedStrokeBrush}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" />
                            <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Rectangle x:Name="DisabledVisualElement" Fill="{StaticResource ControlDisabledFillBrush}" IsHitTestVisible="false" Opacity="0" Stroke="{StaticResource ControlDisabledBrush}" StrokeThickness="{StaticResource ControlStrokeThickness}" />
                        </Grid>
                        <Rectangle x:Name="FocusVisualWhite" Margin="0" Opacity="0" Stroke="White" StrokeDashArray="1,1" StrokeDashOffset="1.5" StrokeEndLineCap="Square" />
                        <Rectangle x:Name="FocusVisualBlack" Margin="0" Opacity="0" Stroke="Black" StrokeDashArray="1,1" StrokeDashOffset="0.5" StrokeEndLineCap="Square" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MetroButton" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Black" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="Padding" Value="10,5,10,5" />
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <!-- We use Grid as a root because it is easy to add more elements to customize the button -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />

                        <!-- Content Presenter is where the text content etc is placed by the control -->
                        <!-- The bindings are useful so that the control can be parameterized without editing the template -->
                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>

                    <!--Each state sets a brush on the Border in the template -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="Border" Value="White" />
                            <Setter Property="BorderBrush" TargetName="Border" Value="Black" />
                            <Setter Property="Foreground" Value="Black" />
                            <Setter Property="FontSize" Value="16" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true" />
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" TargetName="Border" Value="Gray" />
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default style for RadioButton -->
    <Style TargetType="RadioButton">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource ControlForegroundBrush}" />
        <Setter Property="FontFamily" Value="{StaticResource ContentFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource ContentFontSize}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="5,4,0,0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Grid Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="27" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="NormalEllipse" Storyboard.TargetProperty="Opacity" Duration="0" To="0.87" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="NormalEllipse" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="DisabledEllipse" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                        <DoubleAnimation Storyboard.TargetName="NormalEllipse" Storyboard.TargetProperty="Opacity" Duration="0" To="0" />
                                        <ColorAnimation Storyboard.TargetName="CheckGlyph" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Duration="0" To="{StaticResource CheckBoxDisabledGlyphColor}" />
                                        <DoubleAnimation Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Opacity" Duration="0" To="0.35" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="CheckGlyph" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="FocusVisualWhite" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                        <DoubleAnimation Storyboard.TargetName="FocusVisualBlack" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                                <VisualState x:Name="PointerFocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid" />
                                <VisualState x:Name="InvalidUnfocused" />
                                <VisualState x:Name="InvalidFocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="RadioButtonElement" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Ellipse x:Name="NormalEllipse" Height="24" Margin="0" Width="24" Fill="{StaticResource ControlNormalFillBrush}" HorizontalAlignment="Center" Opacity="0.35" Stroke="{StaticResource ControlBorderBrush}" StrokeThickness="{StaticResource ControlStrokeThickness}" VerticalAlignment="Center" />
                                <Ellipse x:Name="DisabledEllipse" Height="24" Margin="0" Width="24" Fill="{StaticResource InputControlDisabledFillBrush}" HorizontalAlignment="Center" Opacity="0" Stroke="{StaticResource InputControlDisabledBrush}" StrokeThickness="{StaticResource ControlStrokeThickness}" VerticalAlignment="Center" />
                                <Ellipse x:Name="CheckGlyph" Height="12" Margin="0" Width="12" Fill="{StaticResource ControlGlyphBrush}" HorizontalAlignment="Center" Opacity="0" Stroke="{StaticResource ControlGlyphBrush}" StrokeThickness="0" VerticalAlignment="Center" />
                            </Grid>
                            <Rectangle x:Name="FocusVisualWhite" Height="27" Width="27" Opacity="0" Stroke="White" StrokeDashArray="1,1" StrokeDashOffset="1.5" StrokeEndLineCap="Square" />
                            <Rectangle x:Name="FocusVisualBlack" Height="27" Width="27" Opacity="0" Stroke="Black" StrokeDashArray="1,1" StrokeDashOffset="0.5" StrokeEndLineCap="Square" />
                        </Grid>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="Left" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MetroRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Background" Value="LightGray" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Padding" Value="5,0,0,0" />
        <Setter Property="Margin" Value="0,3,0,3" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">

                    <!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Height="24" Width="24">
                                <Ellipse x:Name="Ellipse_Border" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0" />
                                <Ellipse x:Name="CheckMark" Margin="5" Fill="Black" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </BulletDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Visibility" TargetName="CheckMark" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="Ellipse_Border" Value="Gray" />
                            <Setter Property="Stroke" TargetName="Ellipse_Border" Value="#40000000" />
                            <Setter Property="Foreground" Value="#80000000" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default style for CheckBox -->
    <Style TargetType="CheckBox">
        <Setter Property="Foreground" Value="{StaticResource ControlForegroundBrush}" />
        <Setter Property="FontFamily" Value="{StaticResource ContentFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource ContentFontSize}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource ControlBorderThickness}" />
        <Setter Property="Padding" Value="5,4,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="27" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="NormalBorder" Storyboard.TargetProperty="Opacity" Duration="0" To="0.87" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="NormalBorder" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="DisabledBorder" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                        <ColorAnimation Storyboard.TargetName="CheckGlyph" Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Duration="0" To="{StaticResource CheckBoxDisabledGlyphColor}" />
                                        <DoubleAnimation Storyboard.TargetName="NormalBorder" Storyboard.TargetProperty="Opacity" Duration="0" To="0" />
                                        <ColorAnimation Storyboard.TargetName="IndeterminateGlyph" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Duration="0" To="{StaticResource CheckBoxDisabledGlyphColor}" />
                                        <DoubleAnimation Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Opacity" Duration="0" To="0.35" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="CheckGlyph" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="IndeterminateGlyph" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="FocusVisualWhite" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                        <DoubleAnimation Storyboard.TargetName="FocusVisualBlack" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                                <VisualState x:Name="PointerFocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid" />
                                <VisualState x:Name="InvalidUnfocused" />
                                <VisualState x:Name="InvalidFocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="CheckBoxElement">
                            <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Border x:Name="NormalBorder" Height="21" Width="21" Background="{StaticResource ControlNormalFillBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="Left" Opacity="0.8" VerticalAlignment="Top" />
                                <Border x:Name="DisabledBorder" Height="21" Width="21" Background="{StaticResource InputControlDisabledFillBrush}" BorderBrush="{StaticResource InputControlDisabledBrush}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="Left" Opacity="0" VerticalAlignment="Top" />
                                <Path x:Name="CheckGlyph" Margin="7.391,-1.104,2.208,5.567" Data="M2,14.5 L9.4,14.275 L6.7,2" Opacity="0" RenderTransformOrigin="0.5,0.5" Stroke="{StaticResource ControlGlyphBrush}" StrokeThickness="3.5" UseLayoutRounding="False">
                                    <Path.RenderTransform>
                                        <TransformGroup>
                                            <RotateTransform Angle="50" />
                                            <TranslateTransform X="-1.2655634455537914" Y="0.9440101007599484" />
                                        </TransformGroup>
                                    </Path.RenderTransform>
                                </Path>
                                <Rectangle x:Name="IndeterminateGlyph" Height="9" Width="9" Fill="{StaticResource ControlGlyphBrush}" HorizontalAlignment="Center" Opacity="0" VerticalAlignment="Center" />
                            </Grid>
                            <Rectangle x:Name="FocusVisualWhite" Height="27" Width="27" Opacity="0" Stroke="White" StrokeDashArray="1,1" StrokeDashOffset="0.5" StrokeEndLineCap="Square" />
                            <Rectangle x:Name="FocusVisualBlack" Height="27" Width="27" Opacity="0" Stroke="Black" StrokeDashArray="1,1" StrokeDashOffset="1.5" StrokeEndLineCap="Square" />
                        </Grid>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MetroCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Background" Value="LightGray" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Padding" Value="5,0,0,0" />
        <Setter Property="Margin" Value="0,3,0,3" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">

                    <!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Height="24" Width="24">
                                <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                                <Path x:Name="CheckMark" Data="M 0 0 L 13 13 M 0 13 L 13 0" HorizontalAlignment="Center" SnapsToDevicePixels="False" Stroke="Black" StrokeThickness="2" VerticalAlignment="Center" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </BulletDecorator>

                    <!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Visibility" TargetName="CheckMark" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default style for TextBox -->

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="FontSize" Value="{StaticResource ContentFontSize}" />
        <Setter Property="Background" Value="LightGray" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="5,5,0,5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="Border" BorderThickness="0">

                            <!-- The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function -->
                            <ScrollViewer x:Name="PART_ContentHost" Margin="0" Background="{TemplateBinding Background}" />

                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default style for PasswordBox -->
    <Style TargetType="PasswordBox">
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Background" Value="{StaticResource TextBoxRestFillBrush}" />
        <Setter Property="MinHeight" Value="36" />
        <Setter Property="Foreground" Value="{StaticResource TextBoxRestFillBrush}" />
        <Setter Property="FontFamily" Value="{StaticResource ContentFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource ContentFontSize}" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxRestBorderBrush}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden" />
        <Setter Property="Padding" Value="10,2,6,4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="PasswordBox">
                    <Grid x:Name="RootElement">
                        <Grid.Resources>
                            <Style x:Name="RevealButtonStyle" TargetType="Button">
                                <Setter Property="Background" Value="{StaticResource TextBoxRestFillBrush}" />
                                <Setter Property="Height" Value="30" />
                                <Setter Property="Width" Value="30" />
                                <Setter Property="MinWidth" Value="30" />
                                <Setter Property="MinHeight" Value="30" />
                                <Setter Property="BorderBrush" Value="{StaticResource TextBoxRestFillBrush}" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="Button">
                                            <Grid x:Name="DeleteGlyph">
                                                <vsm:VisualStateManager.VisualStateGroups>
                                                    <vsm:VisualStateGroup x:Name="CommonStates">
                                                        <vsm:VisualState x:Name="Normal" />
                                                        <vsm:VisualState x:Name="MouseOver">
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetName="MouseOverGlyphBorder1" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                                            </Storyboard>
                                                        </vsm:VisualState>
                                                        <vsm:VisualState x:Name="Pressed">
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetName="PressedGlyphBorder1" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                                                <ColorAnimation Storyboard.TargetName="RevealIcon" Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Duration="0" To="White" />
                                                            </Storyboard>
                                                        </vsm:VisualState>
                                                        <vsm:VisualState x:Name="Disabled" />
                                                    </vsm:VisualStateGroup>
                                                </vsm:VisualStateManager.VisualStateGroups>
                                                <Border x:Name="MouseOverGlyphBorder1" Background="{StaticResource TextBoxGlyphHoverFillBrush}" Opacity="0" />
                                                <Border x:Name="PressedGlyphBorder1" Background="{StaticResource TextBoxGlyphPressedFillBrush}" BorderBrush="White" BorderThickness="1" Opacity="0" />
                                                <Grid x:Name="grid" Height="14" Margin="0" Width="14" HorizontalAlignment="Center" VerticalAlignment="Center">
                                                    <Ellipse x:Name="RevealIcon" Fill="{StaticResource TextBoxGlyphBrush}" Stroke="{StaticResource TextBoxGlyphBrush}" StrokeThickness="2.5" />
                                                    <Ellipse Height="10" Width="10" Fill="#FFEBEBEB" Stroke="{StaticResource TextBoxGlyphBrush}" StrokeThickness="2.5" />
                                                </Grid>
                                            </Grid>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Grid.Resources>
                        <vsm:VisualStateManager.VisualStateGroups>
                            <vsm:VisualStateGroup x:Name="CommonStates">
                                <vsm:VisualState x:Name="Normal" />
                                <vsm:VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="NormalBorder" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Duration="0" To="{StaticResource TextBoxMouseOverFillColor}" />
                                        <ColorAnimation Storyboard.TargetName="NormalBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Duration="0" To="{StaticResource TextBoxMouseOverStrokeColor}" />
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="NormalBorder" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Duration="0" To="{StaticResource TextBoxDisabledFillColor}" />
                                        <ColorAnimation Storyboard.TargetName="NormalBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Duration="0" To="{StaticResource TextBoxDisabledColor}" />
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="ReadOnly" />
                            </vsm:VisualStateGroup>
                            <vsm:VisualStateGroup x:Name="FocusStates">
                                <vsm:VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="FocusBorder" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                                        <DoubleAnimation Storyboard.TargetName="NormalBorder" Storyboard.TargetProperty="Opacity" Duration="0" To="0" />
                                    </Storyboard>
                                </vsm:VisualState>
                                <VisualState x:Name="Unfocused" />
                            </vsm:VisualStateGroup>
                            <vsm:VisualStateGroup x:Name="ValidationStates">
                                <vsm:VisualState x:Name="InvalidUnfocused" />
                                <vsm:VisualState x:Name="InvalidFocused" />
                                <vsm:VisualState x:Name="Valid" />
                            </vsm:VisualStateGroup>
                        </vsm:VisualStateManager.VisualStateGroups>
                        <Border x:Name="NormalBorder" Grid.ColumnSpan="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="1" />
                        <Border x:Name="FocusBorder" Grid.ColumnSpan="2" Background="{StaticResource TextBoxFocusFillBrush}" BorderBrush="{StaticResource TextBoxFocusStrokeBrush}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" />
                        <Grid Margin="2">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ScrollViewer x:Name="ContentElement" Padding="{TemplateBinding Padding}" BorderThickness="0" Foreground="{TemplateBinding Foreground}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" IsTabStop="False" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" />
                            <Button Style="{StaticResource RevealButtonStyle}" x:Name="RevealButton" Grid.Column="1" Height="32" Margin="0" Width="30" IsTabStop="False" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MetroPasswordBox" TargetType="{x:Type PasswordBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="FontSize" Value="{StaticResource ContentFontSize}" />
        <Setter Property="Background" Value="LightGray" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="5,5,0,5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Grid>
                        <Border x:Name="Border" BorderThickness="0">

                            <!-- The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function -->
                            <ScrollViewer x:Name="PART_ContentHost" Margin="0" Background="{TemplateBinding Background}" />

                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default style for ProgressBar -->

    <Storyboard x:Key="IndeterminateOn" RepeatBehavior="Forever">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="B1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
            <EasingDoubleKeyFrame KeyTime="0" Value="-50" />
            <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:3" Value="100" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="B2" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
            <EasingDoubleKeyFrame KeyTime="0" Value="-50" />
            <EasingDoubleKeyFrame KeyTime="0:0:0.667" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:2.167" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:3.167" Value="100" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="B3" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
            <EasingDoubleKeyFrame KeyTime="0" Value="-50" />
            <EasingDoubleKeyFrame KeyTime="0:0:0.833" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:2.333" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:3.333" Value="100" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="B4" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
            <EasingDoubleKeyFrame KeyTime="0" Value="-50" />
            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:2.5" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:3.5" Value="100" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="B5" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
            <EasingDoubleKeyFrame KeyTime="0" Value="-50" />
            <EasingDoubleKeyFrame KeyTime="0:0:1.167" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:2.667" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:3.667" Value="100" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimation Storyboard.TargetName="IndeterminateRoot" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
        <DoubleAnimation Storyboard.TargetName="DeterminateRoot" Storyboard.TargetProperty="Opacity" Duration="0" To="0" />
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="E1" Storyboard.TargetProperty="Opacity">
            <EasingDoubleKeyFrame KeyTime="0" Value="1" />
            <EasingDoubleKeyFrame KeyTime="0:0:3" Value="1" />
            <EasingDoubleKeyFrame KeyTime="0:0:3" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="E2" Storyboard.TargetProperty="Opacity">
            <EasingDoubleKeyFrame KeyTime="0" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:0.167" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:0.167" Value="1" />
            <EasingDoubleKeyFrame KeyTime="0:0:3.167" Value="1" />
            <EasingDoubleKeyFrame KeyTime="0:0:3.167" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="E3" Storyboard.TargetProperty="Opacity">
            <EasingDoubleKeyFrame KeyTime="0" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:0.333" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:0.333" Value="1" />
            <EasingDoubleKeyFrame KeyTime="0:0:3.333" Value="1" />
            <EasingDoubleKeyFrame KeyTime="0:0:3.333" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="E4" Storyboard.TargetProperty="Opacity">
            <EasingDoubleKeyFrame KeyTime="0" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1" />
            <EasingDoubleKeyFrame KeyTime="0:0:3.5" Value="1" />
            <EasingDoubleKeyFrame KeyTime="0:0:3.5" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="E5" Storyboard.TargetProperty="Opacity">
            <EasingDoubleKeyFrame KeyTime="0" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:0.667" Value="0" />
            <EasingDoubleKeyFrame KeyTime="0:0:0.667" Value="1" />
            <EasingDoubleKeyFrame KeyTime="0:0:3.667" Value="1" />
            <EasingDoubleKeyFrame KeyTime="0:0:3.667" Value="0" />
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="IndeterminateOn">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateGradientFill" Storyboard.TargetProperty="(Shape.Fill).(LinearGradientBrush.Transform).(TransformGroup.Children)[0].X" RepeatBehavior="Forever">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                                <SplineDoubleKeyFrame KeyTime="00:00:.5" Value="100" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="PART_Track" Background="{DynamicResource ProgressBarTrackBrush}" />
                        <Border x:Name="PART_Indicator" Background="{DynamicResource ProgressBarFillBrush}" HorizontalAlignment="Left" />
                        <Grid x:Name="IndeterminateRoot" Visibility="Collapsed">
                            <Rectangle x:Name="IndeterminateGradientFill" Margin="1,1,1,1" Opacity="0.7" RadiusX="5" RadiusY="5" StrokeThickness="0">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="0,1" MappingMode="Absolute" SpreadMethod="Repeat" StartPoint="20,1">
                                        <LinearGradientBrush.Transform>
                                            <TransformGroup>
                                                <TranslateTransform X="0" />
                                                <SkewTransform AngleX="-30" />
                                            </TransformGroup>
                                        </LinearGradientBrush.Transform>
                                        <GradientStop Color="#FFFFFFFF" Offset="0" />
                                        <GradientStop Color="#00FFFFFF" Offset=".25" />
                                        <GradientStop Color="#FFFFFFFF" Offset="0.85" />
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                                <Rectangle.OpacityMask>
                                    <LinearGradientBrush EndPoint="0.004,0.465" StartPoint="0.997,0.422">
                                        <GradientStop Color="#00FFFFFF" />
                                        <GradientStop Color="#00FFFFFF" Offset="1" />
                                        <GradientStop Color="#FFFFFFFF" Offset="0.486" />
                                    </LinearGradientBrush>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsIndeterminate" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource IndeterminateOn}" />
                            </Trigger.EnterActions>
                            <Setter Property="Visibility" TargetName="IndeterminateRoot" Value="Visible" />
                            <Setter Property="Background" TargetName="PART_Track" Value="{DynamicResource NormalBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default style for ComboBox -->

    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Rectangle x:Name="Rectangle" Grid.ColumnSpan="2" Height="Auto" Width="Auto" Fill="LightGray" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
            <Rectangle Grid.Column="0" Height="Auto" Width="Auto" Fill="LightGray" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
            <Path x:Name="Arrow" Grid.Column="1" Data="M 0 0 L 4 4 L 8 0 Z" Fill="Black" HorizontalAlignment="Center" VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="Rectangle" Value="Gray" />
                <Setter Property="Foreground" Value="LightGray" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <!-- This must be named as PART_ContentHost -->
        <Border x:Name="PART_ContentHost" Background="{TemplateBinding Background}" Focusable="False" />
    </ControlTemplate>

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FontSize" Value="{StaticResource ContentFontSize}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <!-- The ToggleButton is data-bound to the ComboBox itself to toggle IsDropDownOpen -->
                        <ToggleButton x:Name="ToggleButton" Grid.Column="2" ClickMode="Press" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Template="{StaticResource ComboBoxToggleButton}" />
                        <ContentPresenter x:Name="ContentSite" Margin="10,3,23,3" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" HorizontalAlignment="Left" IsHitTestVisible="False" VerticalAlignment="Center" />

                        <!-- The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it -->
                        <TextBox Style="{x:Null}" x:Name="PART_EditableTextBox" Margin="3,3,23,3" Background="Transparent" Focusable="True" HorizontalAlignment="Left" IsReadOnly="{TemplateBinding IsReadOnly}" Template="{StaticResource ComboBoxTextBox}" VerticalAlignment="Center" Visibility="Hidden" />

                        <!-- The Popup shows the list of items in the ComboBox. IsOpen is data-bound to IsDropDownOpen which is toggled via the ComboBoxToggleButton -->
                        <Popup x:Name="Popup" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Relative" PopupAnimation="Fade" VerticalOffset="-2">
                            <Grid x:Name="DropDown" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder" Background="White" BorderBrush="LightGray" BorderThickness="1" />
                                <ScrollViewer Margin="4,6,4,6" CanContentScroll="True" HorizontalScrollBarVisibility="Auto" SnapsToDevicePixels="True" VerticalScrollBarVisibility="Auto">
                                    <!-- The StackPanel is used to display the children by setting IsItemsHost to be True -->
                                    <StackPanel KeyboardNavigation.DirectionalNavigation="Contained" IsItemsHost="True" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- This forces the DropDown to have a minimum size if it is empty -->
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="MinHeight" TargetName="DropDownBorder" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource TextBoxRestFillBrush}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
                            <Setter Property="Margin" TargetName="DropDownBorder" Value="0,2,0,0" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter Property="Visibility" TargetName="PART_EditableTextBox" Value="Visible" />
                            <Setter Property="Visibility" TargetName="ContentSite" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FontSize" Value="{StaticResource ContentFontSize}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Grid SnapsToDevicePixels="true">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter Margin="10,5,0,5" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!-- Change IsHighlighted SelectedBackgroundBrush to set the selection color for the items -->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" TargetName="Border" Value="LightGray" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="LightGray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default style for Tab -->

    <Style x:Key="TabItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="3,3,3,1" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeDashArray="1 2" StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type TabItem}" TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource TabItemFocusVisual}" />
        <Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid Margin="0,0,2,0" SnapsToDevicePixels="true">
                        <Border x:Name="Bd" Margin="0" Padding="{TemplateBinding Padding}">
                            <Grid HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}">
                                <TextBlock x:Name="unselected" Margin="0" FontSize="18" Text="{TemplateBinding Header}" TextWrapping="Wrap">
                            <TextBlock.Foreground>
                                <SolidColorBrush Color="Gray" />
                            </TextBlock.Foreground>
                                </TextBlock>
                                <TextBlock x:Name="selected" Margin="0" FontSize="18" Opacity="0" Text="{TemplateBinding Header}" TextWrapping="Wrap">
                             <TextBlock.Foreground>
                                <SolidColorBrush Color="#222" />
                            </TextBlock.Foreground>
                                </TextBlock>
                                <TextBlock x:Name="hover" Margin="0" FontSize="18" Opacity="0" Text="{TemplateBinding Header}" TextWrapping="Wrap">
                            <TextBlock.Foreground>
                                <SolidColorBrush Color="Black" />
                            </TextBlock.Foreground>
                                </TextBlock>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Opacity" TargetName="selected" Value="1" />
                            <Setter Property="Opacity" TargetName="unselected" Value="0" />
                            <Setter Property="Opacity" TargetName="hover" Value="0" />
                            <Setter Property="Panel.ZIndex" Value="1" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="false">
                            <Setter Property="Opacity" TargetName="unselected" Value="1" />
                            <Setter Property="Opacity" TargetName="selected" Value="0" />
                            <Setter Property="Opacity" TargetName="hover" Value="0" />
                            <Setter TargetName="Bd" Property="Background" Value="#00000000" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" TargetName="unselected" Value="0" />
                            <Setter Property="Opacity" TargetName="selected" Value="0" />
                            <Setter Property="Opacity" TargetName="hover" Value="1" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="BorderThickness" TargetName="Bd" Value="1,0,1,1" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="BorderThickness" TargetName="Bd" Value="1,1,0,1" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="BorderThickness" TargetName="Bd" Value="0,1,1,1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="TabStripPlacement" Value="Top" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" Value="0,-2,0,0" />
                            <Setter Property="Margin" TargetName="Bd" Value="10,0,10,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="false" />
                                <Condition Property="TabStripPlacement" Value="Top" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" Value="0,-2,0,-1" />
                            <Setter Property="Margin" TargetName="Bd" Value="10,0,10,1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="TabStripPlacement" Value="Bottom" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" Value="-2,-1,-2,-2" />
                            <Setter Property="Margin" TargetName="Bd" Value="0,1,0,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="TabStripPlacement" Value="Left" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" Value="-2,-2,-1,-2" />
                            <Setter Property="Margin" TargetName="Bd" Value="0,0,1,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="TabStripPlacement" Value="Right" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" Value="-1,-2,-2,-2" />
                            <Setter Property="Margin" TargetName="Bd" Value="1,0,0,0" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ControlDisabledBrush}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ControlDisabledBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type TabControl}" TargetType="{x:Type TabControl}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="#b6babf" />
        <Setter Property="TabStripPlacement" Value="Left" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local" ClipToBounds="true" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel" Grid.Column="0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" Margin="0,12,2,0" IsItemsHost="true" />
                        <Border x:Name="ContentPanel" Grid.Column="0" Grid.Row="1" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" Margin="-1,0,-1,-1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter x:Name="PART_SelectedContentHost" Margin="{TemplateBinding Padding}" ContentSource="SelectedContent" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1" />
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1" />
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default style for Menu -->

    <Style TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{StaticResource ControlDisabledBrush}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Margin" Value="6,2,6,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Border Height="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontSize" Value="{DynamicResource ContentFontSize}" />
        <Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="8,2,10,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <Grid>
                        <Rectangle Fill="{TemplateBinding Background}" RadiusX="0" RadiusY="0" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />

                        <Rectangle x:Name="Bg" Fill="{StaticResource ControlDisabledBrush}" Opacity="0" RadiusX="0" RadiusY="0" StrokeThickness="0" />

                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="2" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="17" />
                            </Grid.ColumnDefinitions>

                            <ContentPresenter x:Name="IconPresenter" Margin="1" Content="{TemplateBinding Icon}" Opacity=".7" VerticalAlignment="Center" />

                            <ContentPresenter x:Name="Presenter" Grid.Column="2" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" MinWidth="120" Opacity=".7" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Opacity" TargetName="Bg" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="#FFFFFFFF" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="Padding" Value="0,4,0,4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Menu" Margin="5,5,5,5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0" Opacity="0">
                        <Border.Effect>
                            <DropShadowEffect BlurRadius="5" Opacity="0.8" ShadowDepth="0" />
                        </Border.Effect>
                        <Border.Triggers>
                            <EventTrigger RoutedEvent="Rectangle.Loaded">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Menu" Storyboard.TargetProperty="Opacity" Duration="0:0:0.2" To="1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Border.Triggers>
                        <Grid>
                            <ItemsPresenter Margin="{TemplateBinding Padding}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>